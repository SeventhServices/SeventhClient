trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  Major: '0'
  Minor: '1'
  Patch: '0'

stages:
- stage: BuildAndPack
  displayName: Build and push packs
  jobs:  
  - job: Build
    displayName: Build and push packs
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task : UseDotNet@2
        displayName: Use dotnet-sdk-3.1.100
        inputs:
            packageType: 'sdk'
            version: '3.1.100'

      - task: DotNetCoreCLI@2
        displayName: Build projects
        inputs:
            command: 'build'
            arguments: '-c $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Test projects
        inputs:
            command: 'test'

      - task: DotNetCoreCLI@2
        displayName: Pack packages
        inputs:
            command: 'pack'
            configuration: $(buildConfiguration)
            packagesToPack: '**/*.csproj'
            nobuild: true
            versioningScheme: 'byPrereleaseNumber'
            majorVersion: $(Major)
            minorVersion: $(Minor)
            patchVersion: $(Patch)

      - task: DotNetCoreCLI@2
        displayName: Push packages to artifact
        inputs:
            command: 'push'
            packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
            nuGetFeedType: 'internal'
            publishVstsFeed: 'dee0f159-5b38-44f4-b582-516f041bec05'

      - task: NuGetCommand@2
        displayName: Push packages to myget
        inputs:
            command: 'push'
            packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
            nuGetFeedType: 'external'
            publishFeedCredentials: 'MyGet Push'

      - task: PublishBuildArtifacts@1
        displayName: Push packages to drop
        inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop-azure-ci'
            publishLocation: 'Container'


